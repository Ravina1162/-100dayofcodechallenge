QUESTION : Find the difference of 2 arrays
Given two 0-indexed integer arrays nums1 and nums2, return a list answer of size 2 where:

answer[0] is a list of all distinct integers in nums1 which are not present in nums2.
answer[1] is a list of all distinct integers in nums2 which are not present in nums1.
Note that the integers in the lists may be returned in any order.

 
ANSWER :
class Solution {
    public List<List<Integer>> findDifference(int[] nums1, int[] nums2) 
		{
			Set<Integer> set1 = new HashSet<>(); 
		  Set<Integer> set2 = new HashSet<>();
		  for(int num : nums1)
			  set1.add(num);               
	   	for(int num : nums2)
			  set2.add(num);           		
		List<List<Integer>> res = new ArrayList<>(); 
		res.add(new ArrayList<>());
		res.add(new ArrayList<>());

		for(int num : set1)                                        
			if(set2.contains(num)==false)
			{ 
				res.get(0).add(num); 
				}  
		for(int num : set2)
			if(set1.contains(num)==false)
			{ 
				res.get(1).add(num); 
				}
		return res;
    }
}
INPUT FORMAT :
Input: nums1 = [1,2,3,3], nums2 = [1,1,2,2]
Output: [[3],[]]
Explanation:
For nums1, nums1[2] and nums1[3] are not present in nums2. Since nums1[2] == nums1[3], their value is only included once and answer[0] = [3].
Every integer in nums2 is present in nums1. Therefore, answer[1] = [].
Example 1:
Input: nums1 = [1,2,3,3], nums2 = [1,1,2,2]
Output: [[3],[]]
Explanation:
For nums1, nums1[2] and nums1[3] are not present in nums2. Since nums1[2] == nums1[3], their value is only included once and answer[0] = [3].
Every integer in nums2 is present in nums1. Therefore, answer[1] = [].
Constraints:

1 <= nums1.length, nums2.length <= 1000
-1000 <= nums1[i], nums2[i] <= 1000
